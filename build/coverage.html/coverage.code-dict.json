{"/home/travis/build/npmtest/node-npmtest-giphy-api/test.js":"/* istanbul instrument in package npmtest_giphy_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-giphy-api/lib.npmtest_giphy_api.js":"/* istanbul instrument in package npmtest_giphy_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_giphy_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_giphy_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-giphy-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-giphy-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_giphy_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_giphy_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_giphy_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_giphy_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_giphy_api.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_giphy_api.__dirname +\n                    '/lib.npmtest_giphy_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-giphy-api/node_modules/giphy-api/index.js":"var queryString = require('querystring');\nvar httpService = require('./util/http');\n\n/**\n* Hostname of the Giphy API\n*/\nvar API_HOSTNAME = 'api.giphy.com';\n/**\n* Base PATH of the Giphy API\n*/\nvar API_BASE_PATH = '/v1/';\n/**\n* Public API key provided by Giphy for anyone to use. This is used as a fallback\n* if no API key is provided\n*/\nvar PUBLIC_BETA_API_KEY = 'dc6zaTOxFJmzC';\n/**\n* True if promises exist in this engine. Otherwise false.\n*/\nvar promisesExist = typeof Promise !== 'undefined';\n\n/**\n* Error handler that supports promises and callbacks\n* @param err {String} - Error message\n* @param callback\n*/\nfunction _handleErr (err, callback) {\n  if (callback) {\n    return callback(err);\n  } else if (promisesExist) {\n    return Promise.reject(err);\n  } else {\n    throw new Error(err);\n  }\n}\n\n/**\n* @param options {String|Object} - Options object. If this is a string, it is considered the api key\n*   options.https {Boolean} - Whether to utilize HTTPS library for requests or HTTP. Defaults to HTTP.\n*   options.timeout {Number} - Request timeout before returning an error. Defaults to 30000 milliseconds\n*   options.apiKey {String} - Giphy API key. Defaults to the public beta API key\n*/\nvar GiphyAPI = function (options) {\n  if (typeof options === 'string' ||\n    typeof options === 'undefined' ||\n    options === null) {\n    this.apiKey = options || PUBLIC_BETA_API_KEY;\n    options = {};\n  } else if (typeof options === 'object') {\n    this.apiKey = options.apiKey || PUBLIC_BETA_API_KEY;\n  } else {\n    throw new Error('Invalid options passed to giphy-api');\n  }\n\n  this.https = options.https;\n  this.timeout = options.timeout || 30000;\n};\n\nGiphyAPI.prototype = {\n  /**\n  * Search all Giphy gifs by word or phrase\n  *\n  * @param options Giphy API search options\n  *   options.q {String} - search query term or phrase\n  *   options.limit {Number} - (optional) number of results to return, maximum 100. Default 25.\n  *   options.offset {Number} - (optional) results offset, defaults to 0.\n  *   options.rating {String}- limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {String} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  * @param callback\n  */\n  search: function (options, callback) {\n    if (!options) {\n      return _handleErr('Search phrase cannot be empty.', callback);\n    }\n\n    return this._request({\n      api: options.api || 'gifs',\n      endpoint: 'search',\n      query: typeof options === 'string' ? {\n        q: options\n      } : options\n    }, callback);\n  },\n\n  /**\n  * Search all Giphy gifs for a single Id or an array of Id's\n  *\n  * @param id {String} - Single Giphy gif string Id or array of string Id's\n  * @param callback\n  */\n  id: function (id, callback) {\n    var idIsArr = Array.isArray(id);\n\n    if (!id || (idIsArr && id.length === 0)) {\n      return _handleErr('Id required for id API call', callback);\n    }\n\n    // If an array of Id's was passed, generate a comma delimited string for\n    // the query string.\n    if (idIsArr) {\n      id = id.join();\n    }\n\n    return this._request({\n      api: 'gifs',\n      query: {\n        ids: id\n      }\n    }, callback);\n  },\n\n  /**\n  * Search for Giphy gifs by phrase with Gify vocabulary\n  *\n  * @param options Giphy API translate options\n  *   options.s {String} - term or phrase to translate into a GIF\n  *   options.rating {String} - limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {String} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  */\n  translate: function (options, callback) {\n    if (!options) {\n      return _handleErr('Translate phrase cannot be empty.', callback);\n    }\n\n    return this._request({\n      api: options.api || 'gifs',\n      endpoint: 'translate',\n      query: typeof options === 'string' ? {\n        s: options\n      } : options\n    }, callback);\n  },\n\n  /**\n  * Fetch random gif filtered by tag\n  *\n  * @param options Giphy API random options\n  *   options.tag {String} - the GIF tag to limit randomness by\n  *   options.rating {String} - limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {Stirng} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  */\n  random: function (options, callback) {\n    var reqOptions = {\n      api: (options ? options.api : null) || 'gifs',\n      endpoint: 'random'\n    };\n\n    if (typeof options === 'string') {\n      reqOptions.query = {\n        tag: options\n      };\n    } else if (typeof options === 'object') {\n      reqOptions.query = options;\n    } else if (typeof options === 'function') {\n      callback = options;\n    }\n\n    return this._request(reqOptions, callback);\n  },\n\n  /**\n  * Fetch trending gifs\n  *\n  * @param options Giphy API random options\n  *   options.limit {Number} - (optional) limits the number of results returned. By default returns 25 results.\n  *   options.rating {String} - limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {String} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  */\n  trending: function (options, callback) {\n    var reqOptions = {\n      endpoint: 'trending'\n    };\n\n    reqOptions.api = (options ? options.api : null) || 'gifs';\n\n    // Cleanup so we don't add this to our query\n    if (options) {\n      delete options.api;\n    }\n\n    if (typeof options === 'object' &&\n      Object.keys(options).length !== 0) {\n      reqOptions.query = options;\n    } else if (typeof options === 'function') {\n      callback = options;\n    }\n\n    return this._request(reqOptions, callback);\n  },\n\n  /**\n  * Prepares the HTTP request and query string for the Giphy API\n  *\n  * @param options\n  *   options.endpoint {String} - The API endpoint e.g. search\n  *   options.query {String|Object} Query string parameters. If these are left\n  *       out then we default to an empty string. If this is passed as a string,\n  *       we default to the 'q' query string field used by Giphy.\n  */\n  _request: function (options, callback) {\n    if (!callback && !promisesExist) {\n      throw new Error('Callback must be provided if promises are unavailable');\n    }\n\n    var endpoint = '';\n    if (options.endpoint) {\n      endpoint = '/' + options.endpoint;\n    }\n\n    endpoint += '?';\n\n    var query;\n    var self = this;\n\n    if (typeof options.query !== 'undefined' && typeof options.query === 'object') {\n      if (Object.keys(options.query).length === 0) {\n        if (callback) {\n          return callback('Options object should not be empty');\n        }\n        return Promise.reject('Options object should not be empty');\n      }\n\n      options.query.api_key = this.apiKey;\n      query = queryString.stringify(options.query);\n    } else {\n      query = queryString.stringify({\n        api_key: self.apiKey\n      });\n    }\n\n    var httpOptions = {\n      request: {\n        host: API_HOSTNAME,\n        path: API_BASE_PATH + options.api + endpoint + query\n      },\n      https: this.https,\n      timeout: this.timeout,\n      fmt: options.query && options.query.fmt\n    };\n\n    var makeRequest = function (resolve, reject) {\n      httpService.get(httpOptions, resolve, reject);\n    };\n\n    if (callback) {\n      var resolve = function (res) {\n        callback(null, res);\n      };\n      var reject = function (err) {\n        callback(err);\n      };\n      makeRequest(resolve, reject);\n    } else {\n      if (!promisesExist) {\n        throw new Error('Callback must be provided unless Promises are available');\n      }\n      return new Promise(function (resolve, reject) {\n        makeRequest(resolve, reject);\n      });\n    }\n  }\n};\n\nmodule.exports = function (apiKey, options) {\n  return new GiphyAPI(apiKey, options);\n};\n","/home/travis/build/npmtest/node-npmtest-giphy-api/node_modules/giphy-api/util/http.js":"var http = require('http');\nvar https = require('https');\n\n/**\n * Non-browser based GET request\n * @param options {Object}\n *   options.request {Object} - Request data including host and path\n *   options.https {Boolean} - Whether to utilize HTTPS library for requests or HTTP. Defaults to HTTP.\n *   options.timeout {Number} - Request timeout before returning an error. Defaults to 30000 milliseconds\n *   options.fmt {String} - Return results in html or json format (useful for viewing responses as GIFs to debug/test)\n */\nexports.get = function (options, resolve, reject) {\n  var httpService = options.https ? https : http;\n  var request = options.request;\n  var timeout = options.timeout;\n  var fmt = options.fmt;\n\n  request.withCredentials = false;\n\n  var req = httpService.get(request, function (response) {\n    var body = '';\n    response.on('data', function (d) {\n      body += d;\n    });\n    response.on('end', function () {\n      if (fmt !== 'html') {\n        body = JSON.parse(body);\n      }\n      resolve(body);\n    });\n  });\n\n  req.on('error', function (err) {\n    reject(err);\n  });\n\n  req.on('socket', function (socket) {\n    socket.setTimeout(timeout);\n    socket.on('timeout', function () {\n      req.abort();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-giphy-api/node_modules/giphy-api/util/http_browser.js":"/* globals XMLHttpRequest */\n\n/**\n * Browser based GET request\n * @param options {Object}\n *   options.request {Object} - Request data including host and path\n *   options.https {Boolean} - Whether to utilize HTTPS library for requests or HTTP. Defaults to HTTP.\n *   options.timeout {Number} - Request timeout before returning an error. Defaults to 30000 milliseconds\n *   options.fmt {String} - Return results in html or json format (useful for viewing responses as GIFs to debug/test)\n */\nexports.get = function (options, resolve, reject) {\n  var request = options.request;\n  var timeout = options.timeout;\n  var fmt = options.fmt;\n\n  var timerId = setTimeout(function () {\n    reject(new Error('Timeout while fetching asset'));\n  }, timeout);\n\n  var xhr = new XMLHttpRequest();\n  xhr.withCredentials = false;\n\n  var onFail = function (err) {\n    clearTimeout(timerId);\n    err = err || new Error('Giphy API request failed!');\n    reject(err);\n  };\n\n  xhr.addEventListener('error', onFail);\n  xhr.addEventListener('abort', onFail);\n  xhr.addEventListener('load', function () {\n    clearTimeout(timerId);\n    var body = xhr.response;\n\n    if (fmt !== 'html') {\n      body = JSON.parse(body);\n    }\n    resolve(body);\n  });\n\n  var protocol = options.https ? 'https' : 'http';\n  var host = request.host;\n  var path = request.path;\n  var url = protocol + '://' + host + path;\n\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n"}